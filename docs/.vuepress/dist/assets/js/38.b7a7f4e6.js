(window.webpackJsonp=window.webpackJsonp||[]).push([[38],{383:function(e,t,n){"use strict";n.r(t);var a=n(23),o=function(e){e.options.__data__block__={mermaid_382ee1a3:"graph TD\n\n    A[宏任务] --\x3e B[宏任务执行完毕] --\x3e C{是否有微任务} ;\n    C -- 是 --\x3e D[按顺序执行所有微任务]--\x3e E[浏览器渲染];\n    C -- 否 --\x3e E -- 执行下一个宏任务 --\x3e A;\n"}},_=Object(a.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h3",{attrs:{id:"event-loop"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#event-loop"}},[e._v("#")]),e._v(" Event Loop")]),e._v(" "),n("p",[e._v("Event Loop 是一个很重要的概念，指的是计算机系统的一种运行机制。\nJavaScript语言就采用这种机制，来解决单线程运行带来的一些问题。")]),e._v(" "),n("p",[e._v('主线程从"任务队列"中读取事件，这个过程是循环不断的，所以整个的这种运行机制又称为Event Loop（事件循环）。')]),e._v(" "),n("ol",[n("li",[e._v("一开始整段脚本作为第一个宏任务执行")]),e._v(" "),n("li",[e._v("执行过程中同步代码直接执行，宏任务进入宏任务队列，微任务进入微任务队列")]),e._v(" "),n("li",[e._v("当前宏任务执行完出队，检查微任务队列，如果有则依次执行，直到微任务队列为空")]),e._v(" "),n("li",[e._v("执行浏览器 UI 线程的渲染工作")]),e._v(" "),n("li",[e._v("检查是否有Web worker任务，有则执行")]),e._v(" "),n("li",[e._v("执行队首新的宏任务，回到2，依此循环，直到宏任务和微任务队列都为空")])]),e._v(" "),n("Mermaid",{attrs:{id:"mermaid_382ee1a3",graph:e.$dataBlock.mermaid_382ee1a3}})],1)}),[],!1,null,null,null);"function"==typeof o&&o(_);t.default=_.exports}}]);